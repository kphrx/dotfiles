agent="$HOME/.ssh/ssh-agent-$USER"
if [ -S "$SSH_AUTH_SOCK" ]; then
    case $SSH_AUTH_SOCK in
    /**/agent.[0-9]*)
        ln -snf "$SSH_AUTH_SOCK" $agent && export SSH_AUTH_SOCK=$agent
    esac
elif [ -S $agent ]; then
    export SSH_AUTH_SOCK=$agent
else
    echo "no ssh-agent"
fi

## Homebrew env var
eval "$(brew shellenv)"
export HOMEBREW_GITHUB_API_TOKEN={{ (bitwardenFields "item" "homebrew").github_token.value | quote }}
export HOMEBREW_NO_AUTO_UPDATE=1
export HOMEBREW_AUTO_UPDATE_SECS="21600"
export HOMEBREW_INSTALL_CLEANUP=1
export HOMEBREW_CLEANUP_MAX_AGE_DAYS=30
export HOMEBREW_NO_ENV_HINTS=1

##    ##
# PATH #
##    ##

# Completions
export fpath=($HOME/.zsh.d/functions $(brew --prefix rustup)/share/zsh/site-functions /usr/local/share/zsh/functions /usr/local/share/zsh-completions /usr/local/Homebrew/completions/zsh $fpath)

if [ -s "$HOME/.cargo/env" ]; then
    . "$HOME/.cargo/env"
else
    path+="${HOME}/.cargo/bin"
fi
[ -s "$HOME/.deno/env" ] && . "$HOME/.deno/env"

## PHP Composer path
COMPOSER_PATH="${HOME}/.composer/vendor/bin"

## Wine Stable
# WINESTABLE_PATH="/Applications/Wine Stable.app/Contents/Resources/start/bin"
# WINE_PATH="/Applications/Wine Stable.app/Contents/Resources/wine/bin"

## Android SDK Platform Tools
ANDROID_SDK="/usr/local/share/android-commandlinetools"
PLATFORM_TOOLS_PATH="${ANDROID_SDK}/platform-tools"

## Docker.app
# DOCKER_PATH="/Applications/Docker.app/Contents/Resources/bin"

## Homebrew

### rustup path
RUSTUP_PATH="$(brew --prefix rustup)/bin"

### fzf path
FZF_PATH="$(brew --prefix fzf)/bin"

### SQLite path
SQLITE_PATH="$(brew --prefix sqlite)/bin"

### PostgreSQK path
POSTGRES_PATH="$(brew --prefix postgresql@17)/bin"

### OpenSSL path
OPENSSL_PATH=("$(brew --prefix openssl@3)/bin" "$(brew --prefix openssl@1.1)/bin")

### cURL path
CURL_PATH="$(brew --prefix curl)/bin"

### unzip path
UNZIP_PATH="$(brew --prefix unzip)/bin"

### Ruby path
RUBY_PATH="$(brew --prefix ruby)/bin"

### icu4c path
ICU4C_PATH="$(brew --prefix icu4c)/bin"

### openldap path
OPENLDAP_PATH=("$(brew --prefix openldap)/bin" "$(brew --prefix openldap)/sbin")

### libpq path
LIBPQ_PATH="$(brew --prefix libpq)/bin"

### Gem path
export GEM_HOME="$(brew --prefix)/lib/ruby/gems/3.0.0"
GEM_PATH="${GEM_HOME}/bin"

### LLVM path
# LLVM_PATH="$(brew --prefix llvm)/bin"

### Qt5 Path
QT_PATH="$(brew --prefix qt)/bin"

## Combine
path=($PLATFORM_TOOLS_PATH $RUSTUP_PATH $FZF_PATH $DOCKER_PATH $COMPOSER_PATH $GOBIN $WINESTABLE_PATH $SQLITE_PATH $POSTGRES_PATH $OPENSSL_PATH $CURL_PATH $UNZIP_PATH $RUBY_PATH $ICU4C_PATH $OPENLDAP_PATH $LIBPQ_PATH $GEM_PATH $QT_PATH $path)

## swift path
# Added by swiftly
. "/Users/kphrx/Library/Application Support/swiftly/env.sh"
if [ -f "$(xcode-select -p)/usr/bin/xcodebuild" ] > /dev/null 2>&1; then
    [ -L "$TOOLCHAIN_PATH" ] && export TOOLCHAINS="$(plutil -extract CFBundleIdentifier raw $TOOLCHAIN_PATH/Info.plist)"
fi

path=("${HOME}/.local/bin" $path)

### alternative nvm, fnm
type fnm > /dev/null 2>&1 && [[ -z "${FNM_MULTISHELL_PATH}" ]] && eval "$(fnm env)"

# . <(rdctl completion zsh)

. "$(brew --prefix)/share/google-cloud-sdk/path.zsh.inc"

fpath=(${(u)fpath})
path=(${(u)path})

export PKG_CONFIG_PATH="$(brew --prefix curl)/lib/pkgconfig:$PKG_CONFIG_PATH"
export PKG_CONFIG_PATH="$(brew --prefix openssl@3)/lib/pkgconfig:$(brew --prefix openssl@1.1)/lib/pkgconfig:$PKG_CONFIG_PATH"
export PKG_CONFIG_PATH="$(brew --prefix libffi)/lib/pkgconfig:$PKG_CONFIG_PATH"
export PKG_CONFIG_PATH="$(brew --prefix zlib)/lib/pkgconfig:$PKG_CONFIG_PATH"
# LDFLAGS="-L$(BREW_PREFIX) -L${BREW_PREFIX}/opt/libffi/lib $LDFLAGS"
# CPPFLAGS="-I${BREW_PREFIX}/opt/openssl@1.1/include -I${BREW_PREFIX}/opt/libffi/include $CPPFLAGS"
