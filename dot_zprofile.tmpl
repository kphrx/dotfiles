agent="$HOME/.ssh/ssh-agent-$USER"
if [ -S "$SSH_AUTH_SOCK" ]; then
    case $SSH_AUTH_SOCK in
    /**/agent.[0-9]*)
        ln -snf "$SSH_AUTH_SOCK" $agent && export SSH_AUTH_SOCK=$agent
    esac
elif [ -S $agent ]; then
    export SSH_AUTH_SOCK=$agent
else
    echo "no ssh-agent"
fi

## Homebrew env var
if type brew > /dev/null 2>&1 && [[ -z "$HOMEBREW_PREFIX" ]]; then
    eval "$(brew shellenv)"
    export HOMEBREW_GITHUB_API_TOKEN={{ (bitwardenFields "item" "homebrew").github_token.value | quote }}
    export HOMEBREW_NO_AUTO_UPDATE=1
    export HOMEBREW_AUTO_UPDATE_SECS="21600"
    export HOMEBREW_INSTALL_CLEANUP=1
    export HOMEBREW_CLEANUP_MAX_AGE_DAYS=30
    export HOMEBREW_NO_ENV_HINTS=1
fi

export MODRINTH_TOKEN={{ (bitwardenFields "item" "modrinth").token.value | quote }}

##    ##
# PATH #
##    ##

## Homebrew
if type brew > /dev/null 2>&1; then
    RUSTUP_PREFIX="$(brew --prefix rustup)"
    OPENLDAP_PREFIX="$(brew --prefix openldap)"
    CURL_PREFIX="$(brew --prefix curl)"
    LIBFFI_PREFIX="$(brew --prefix libffi)"

    RUSTUP_PATH="$RUSTUP_PREFIX/bin"
    OPENLDAP_PATH=("$OPENLDAP_PREFIX/bin" "$OPENLDAP_PREFIX/sbin")
    CURL_PATH="$CURL_PREFIX/bin"

    FZF_PATH="$(brew --prefix fzf)/bin"

    SQLITE_PATH="$(brew --prefix sqlite)/bin"

    POSTGRES_PATH="$(brew --prefix postgresql@17)/bin"

    UNZIP_PATH="$(brew --prefix unzip)/bin"

    RUBY_PATH="$(brew --prefix ruby)/bin"

    ICU4C_PATH="$(brew --prefix icu4c)/bin"

    # LLVM_PATH="$(brew --prefix llvm)/bin"

    QT_PATH="$(brew --prefix qt)/bin"

    CURL_PKG_CONFIG="$CURL_PREFIX/lib/pkgconfig"
    LIBFFI_PKG_CONFIG="$LIBFFI_PREFIX/lib/pkgconfig"

    ZLIB_PKG_CONFIG="$(brew --prefix zlib)/lib/pkgconfig"

    export PKG_CONFIG_PATH="ZLIB_PKG_CONFIG:$LIBFFI_PKG_CONFIG:$CURL_PKG_CONFIG:$PKG_CONFIG_PATH"
fi

path=($RUSTUP_PATH $FZF_PATH $SQLITE_PATH $POSTGRES_PATH $CURL_PATH $UNZIP_PATH $RUBY_PATH $ICU4C_PATH $OPENLDAP_PATH $QT_PATH $path)

. "$(brew --prefix)/share/google-cloud-sdk/path.zsh.inc"

## swift path
# Added by swiftly
[ -s "$HOME/Library/Application Support/swiftly/env.sh" ] && . "$HOME/Library/Application Support/swiftly/env.sh"
if [ -f "$(xcode-select -p)/usr/bin/xcodebuild" ] > /dev/null 2>&1; then
    [ -L "$TOOLCHAIN_PATH" ] && export TOOLCHAINS="$(plutil -extract CFBundleIdentifier raw $TOOLCHAIN_PATH/Info.plist)"
fi

## Android SDK Platform Tools
ANDROID_SDK="/usr/local/share/android-commandlinetools"

path=("$ANDROID_SDK/platform-tools" $path)

[ -L "$GEM_HOME" ] && path=("$GEM_HOME/bin" $path)
[ -L "$GOBIN" ] && path=($GOBIN $path)

if [ -s "$HOME/.cargo/env" ]; then
    . "$HOME/.cargo/env"
else
    path=("$HOME/.cargo/bin" $path)
fi
[ -s "$HOME/.deno/env" ] && . "$HOME/.deno/env"

path=("$HOME/.composer/vendor/bin" $path)

path=("$HOME/.dotnet/tools" $path)

path=("$HOME/.local/bin" $path)

### alternative nvm, fnm
if type fnm > /dev/null 2>&1; then
    [[ -z "$FNM_MULTISHELL_PATH" ]] && eval "$(fnm env)"
fi

path=(${(u)path})

# Completions
export fpath=(/usr/local/share/zsh/functions /usr/local/share/zsh-completions $fpath)
if type brew > /dev/null 2>&1; then
    RUSTUP_FPATH="$RUSTUP_PREFIX/share/zsh/site-functions"
    fpath=($RUSTUP_FPATH /usr/local/Homebrew/completions/zsh $fpath)
fi

fpath=($HOME/.zsh.d/functions $fpath)

fpath=(${(u)fpath})
